package com.dj.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.erzhoumoni.bean.ShoppingCartListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOPPING_CART_LIST_BEAN".
*/
public class ShoppingCartListBeanDao extends AbstractDao<ShoppingCartListBean, Integer> {

    public static final String TABLENAME = "SHOPPING_CART_LIST_BEAN";

    /**
     * Properties of entity ShoppingCartListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommodityId = new Property(0, int.class, "commodityId", true, "COMMODITY_ID");
        public final static Property CommodityName = new Property(1, String.class, "commodityName", false, "COMMODITY_NAME");
        public final static Property Count = new Property(2, int.class, "count", false, "COUNT");
        public final static Property Pic = new Property(3, String.class, "pic", false, "PIC");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
        public final static Property ShopName = new Property(5, String.class, "shopName", false, "SHOP_NAME");
    }


    public ShoppingCartListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingCartListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOPPING_CART_LIST_BEAN\" (" + //
                "\"COMMODITY_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: commodityId
                "\"COMMODITY_NAME\" TEXT," + // 1: commodityName
                "\"COUNT\" INTEGER NOT NULL ," + // 2: count
                "\"PIC\" TEXT," + // 3: pic
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"SHOP_NAME\" TEXT);"); // 5: shopName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOPPING_CART_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShoppingCartListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommodityId());
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(2, commodityName);
        }
        stmt.bindLong(3, entity.getCount());
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
        stmt.bindDouble(5, entity.getPrice());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShoppingCartListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommodityId());
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(2, commodityName);
        }
        stmt.bindLong(3, entity.getCount());
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
        stmt.bindDouble(5, entity.getPrice());
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ShoppingCartListBean readEntity(Cursor cursor, int offset) {
        ShoppingCartListBean entity = new ShoppingCartListBean( //
            cursor.getInt(offset + 0), // commodityId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commodityName
            cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic
            cursor.getDouble(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // shopName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShoppingCartListBean entity, int offset) {
        entity.setCommodityId(cursor.getInt(offset + 0));
        entity.setCommodityName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCount(cursor.getInt(offset + 2));
        entity.setPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setShopName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ShoppingCartListBean entity, long rowId) {
        return entity.getCommodityId();
    }
    
    @Override
    public Integer getKey(ShoppingCartListBean entity) {
        if(entity != null) {
            return entity.getCommodityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShoppingCartListBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
